{"/home/travis/build/npmtest/node-npmtest-surge/test.js":"/* istanbul instrument in package npmtest_surge */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-surge/lib.npmtest_surge.js":"/* istanbul instrument in package npmtest_surge */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_surge = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_surge = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-surge/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-surge && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_surge */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_surge\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_surge.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_surge.rollup.js'] =\n            local.assetsDict['/assets.npmtest_surge.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_surge.__dirname + '/lib.npmtest_surge.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-surge/node_modules/surge/lib/surge.js":"\nvar middleware  = require('./middleware')\nvar skin        = require('./middleware/util/skin.js')\nvar help        = require('./middleware/help')\nvar read        = require(\"read\")\nvar minimist    = require('minimist')\n\n\nvar whitelist   = require(\"./middleware/whitelist\")\nvar endpoint    = require(\"./middleware/endpoint\")\nvar pkg         = require(\"./middleware/pkg\")\nvar version     = require(\"./middleware/version\")\nvar welcome     = require(\"./middleware/welcome\")\nvar creds       = require(\"./middleware/creds\")\nvar whoami      = require(\"./middleware/whoami\")\nvar tokencheck  = require(\"./middleware/tokencheck\")\nvar email       = require(\"./middleware/email\")\nvar auth        = require(\"./middleware/auth\")\nvar logout      = require(\"./middleware/logout\")\nvar help        = require(\"./middleware/help\")\nvar project     = require(\"./middleware/project\")\nvar size        = require(\"./middleware/size\")\nvar domain      = require(\"./middleware/domain\")\nvar protocol    = require(\"./middleware/protocol\")\nvar deploy      = require(\"./middleware/deploy\")\nvar ipaddress   = require(\"./middleware/ipaddress\")\nvar login       = require(\"./middleware/login\")\nvar shorthand   = require(\"./middleware/shorthand\")\nvar list        = require(\"./middleware/list\")\nvar token       = require(\"./middleware/token\")\nvar teardown    = require(\"./middleware/teardown\")\nvar discovery   = require(\"./middleware/discovery\")\nvar plus        = require(\"./middleware/plus\")\nvar ssl         = require(\"./middleware/ssl\")\nvar log         = require(\"./middleware/log\")\n\n\nvar space = function(req, next){ console.log(); next() }\n\nvar parse = function(arg){\n  if(arg.hasOwnProperty(\"parent\") && arg.parent.hasOwnProperty(\"rawArgs\")){\n    arg = arg.parent.rawArgs.slice(3)\n  } else if (arg.argv && arg.argv._) {\n    arg = arg.parsed.argv._.slice(1)\n  }\n  return arg instanceof Array\n    ? minimist(arg)\n    : arg\n}\n\nmodule.exports = function(config){\n  config = config || {}\n\n  var ep = config.endpoint\n    ? config.endpoint\n    : config.platform ? \"https://surge.\" + config.platform : 'https://surge.surge.sh'\n\n  config.platform = config.platform || \"surge.sh\"\n\n  var options = {\n    alias: {\n      p: 'project',\n      d: 'domain',\n      e: 'endpoint',\n      a: 'add',\n      r: 'remove'\n    },\n    default: { e: ep }\n  }\n\n  var surge = function(args){\n    // will be one of:\n    // commander, yargs, process.argv.split(2), OR minimist\n\n    var argv = minimist(args, options)\n    var cmd  = argv._[0]\n\n    var commands = [\"login\", \"logout\", \"whoami\", \"list\", \"publish\", \"teardown\", \"token\", \"plus\", \"ssl\"]\n\n    if (commands.indexOf(cmd) !== -1) {\n      argv._.shift()\n      surge[cmd]({})(argv)\n    } else if(config.default && commands.indexOf(config.default) !== -1 ){\n      surge[config.default]({})(argv)\n    }\n  }\n\n  var stub = function(req, next){ next(); }\n\n  surge.token = function(hooks){\n    var hooks = hooks || {}\n    var preAuth     = hooks.preAuth       || stub\n    var postAuth    = hooks.postAuth      || stub\n    var onion = [\n      whitelist, endpoint, pkg, help, version, space,\n      preAuth, creds, welcome, tokencheck, email, auth, postAuth,\n      token, space\n    ]\n    return function(){\n      var argv = parse(arguments[arguments.length -1])\n      skin({\n        config: config,\n        argv: argv,\n        read: read\n      }, onion)\n    }\n  }\n\n  surge.login = function(hooks){\n    var hooks = hooks || {}\n    var preAuth     = hooks.preAuth       || stub\n    var postAuth    = hooks.postAuth      || stub\n    var onion = [\n      whitelist, endpoint, pkg, help, version, space,\n      preAuth, creds, welcome, email, auth, postAuth,\n      login, space\n    ]\n    return function(){\n      var argv = parse(arguments[arguments.length -1])\n      skin({\n        config: config,\n        argv: argv,\n        read: read\n      }, onion)\n    }\n  }\n\n  surge.logout = function(hooks){\n    var hooks = hooks || {}\n    var onion = [\n      whitelist, endpoint, pkg, help, version, space,\n      creds, logout, space\n    ]\n    return function(){\n      var argv = parse(arguments[arguments.length -1])\n      skin({\n        config: config,\n        argv: argv,\n        read: read\n      }, onion)\n    }\n  }\n\n  surge.publish = function(hooks){\n    var hooks = hooks || {}\n    var preAuth     = hooks.preAuth       || stub\n    var postAuth    = hooks.postAuth      || stub\n    var preProject  = hooks.preProject    || stub\n    var postProject = hooks.postProject   || stub\n    var preSize     = hooks.preSize       || stub\n    var postSize    = hooks.postSize      || stub\n    var preDomain   = hooks.preDomain     || stub\n    var postDomain  = hooks.postDomain    || stub\n    var prePublish  = hooks.prePublish    || stub\n    var postPublish = hooks.postPublish   || stub\n    var onion = [\n      whitelist, endpoint, pkg, help, version, space,\n      preAuth, creds, welcome, tokencheck, email, auth, postAuth, shorthand,\n      preProject, project, postProject,\n      preSize, size, postSize,\n      preDomain, discovery.setDomainFromCname, discovery.suggestDomainFromGenerator, domain, postDomain,\n      prePublish, protocol, deploy, postPublish,\n      ipaddress\n    ]\n    return function(){\n      var argv = parse(arguments[arguments.length -1])\n      skin({\n        config: config,\n        argv: argv,\n        read: read\n      }, onion)\n    }\n  }\n\n  surge.whoami = function(hooks){\n    var hooks = hooks || {}\n    var onion = [\n      whitelist, endpoint, pkg, help, version, space,\n      creds, tokencheck, whoami\n    ]\n    return function(){\n      var argv = parse(arguments[arguments.length -1])\n      skin({\n        config: config,\n        argv: argv,\n        read: read\n      }, onion)\n    }\n  }\n\n  surge.list = function(hooks){\n    var hooks = hooks || {}\n    var preAuth   = hooks.preAuth  || stub\n    var postAuth  = hooks.postAuth || stub\n    var onion = [\n      whitelist, endpoint, pkg, help, version, space,\n      preAuth, creds, welcome, tokencheck, email, auth, postAuth,\n      list, space\n    ]\n    return function(){\n      var argv = parse(arguments[arguments.length -1])\n      skin({\n        config: config,\n        argv: argv,\n        read: read\n      }, onion)\n    }\n  }\n\n  surge.teardown = function(hooks){\n    var hooks = hooks || {}\n    var preAuth   = hooks.preAuth  || stub\n    var postAuth  = hooks.postAuth || stub\n    var onion = [\n      whitelist, endpoint, pkg, help, version, space,\n      preAuth, creds, welcome, tokencheck, email, auth, postAuth,\n      shorthand, discovery.setDomainFromArgs, discovery.suggestDomainFromCname, domain,\n      teardown, space\n    ]\n    return function(){\n      var argv = parse(arguments[arguments.length -1])\n      skin({\n        config: config,\n        argv: argv,\n        read: read\n      }, onion)\n    }\n  }\n\n  surge.plus = function(hooks){\n    var hooks = hooks || {}\n    var preAuth   = hooks.preAuth  || stub\n    var postAuth  = hooks.postAuth || stub\n    var onion = [\n      whitelist, endpoint, pkg, help, version, space,\n      preAuth, creds, welcome, tokencheck, email, auth, postAuth,\n      shorthand, discovery.setDomainFromArgs, discovery.suggestDomainFromCname, domain,\n      plus, space\n    ]\n    return function(){\n      var argv = parse(arguments[arguments.length -1])\n      skin({\n        config: config,\n        argv: argv,\n        read: read\n      }, onion)\n    }\n  }\n\n  surge.ssl = function(hooks){\n    var hooks = hooks || {}\n    var preAuth   = hooks.preAuth  || stub\n    var postAuth  = hooks.postAuth || stub\n    var onion = [\n      whitelist, endpoint, pkg, help, version, space,\n      preAuth, creds, welcome, tokencheck, email, auth, postAuth,\n      shorthand, discovery.setDomainFromArgs, discovery.suggestDomainFromCname, domain,\n      ssl, space\n    ]\n    return function(){\n      var argv = parse(arguments[arguments.length -1])\n      skin({\n        config: config,\n        argv: argv,\n        read: read\n      }, onion)\n    }\n  }\n\n  return surge\n\n}\n","/home/travis/build/npmtest/node-npmtest-surge/node_modules/surge/lib/middleware/index.js":"module.exports = [\n  require(\"./whitelist\"),   // clean\n  require(\"./endpoint\"),    // clean\n  require(\"./pkg\"),\n  require(\"./version\"),\n  require(\"./help\"),\n  require(\"./creds\"),\n  require(\"./whoami\"),\n  require(\"./logout\"),\n  require(\"./tokencheck\"),\n  require(\"./email\"),\n  require(\"./auth\"),\n  require(\"./login\"),\n  require(\"./list\"),\n  require(\"./plus\"),\n  require(\"./ssl\"),\n  require(\"./teardown\"),\n  require(\"./shorthand\"),\n  require(\"./project\"),\n  require(\"./size\"),\n  require(\"./domain\"),\n  require(\"./protocol\"),\n  require(\"./deploy\"),\n  require(\"./ipaddress\")\n  //require(\"./log\")\n]\n","/home/travis/build/npmtest/node-npmtest-surge/node_modules/surge/lib/middleware/whitelist.js":"var helpers = require(\"./util/helpers\")\n\nmodule.exports = function(req, next){\n  var commands = ['h','b', 'd','e','a','r','v','V','p','endpoint','project','domain','add','remove','version','verbose','token','help','pem', 'build','$0','_'];\n\n  var args = [];\n  for (param in req.argv) {\n    args.push(param);\n  }\n\n  var filteredSet = args.filter(function(n){ return (commands.indexOf(n) === -1) });\n\n  if (filteredSet.length != 0) {\n    helpers.log()\n    helpers.log(\"       surge: `--\" + filteredSet[0] + \"` is not a surge command.\").hr()\n  } else {\n    next()\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-surge/node_modules/surge/lib/middleware/util/helpers.js":"var prompt      = require('prompt')\n\nvar request     = require(\"request\")\nvar localCreds  = require(\"./creds.js\")\nvar os          = require('os')\nvar url         = require(\"url\")\nvar urlAddy     = require(\"url-parse-as-address\")\nvar read = require(\"read\")\nvar isDomain = require(\"is-domain\")\n\nexports.read = read\n\n\nvar sig = '[' + 'surge'.cyan + ']'\nsig = null\n\nvar log = exports.log = function(){\n  var args = Array.prototype.slice.call(arguments)\n  args.unshift(sig)\n  args = args.filter(function(n){ return n != undefined });\n  console.log.apply(console, args)\n  return this\n};\n\nexports.hr = function(){\n  this.log()\n  return this\n};\n\n\nexports.stacktrace = function(str, options){\n  var lineno  = options.lineno  || -1\n  var context = options.context || 8\n  var context = context = context / 2\n  var lines   = (os.EOL + str).split(os.EOL)\n  var start   = Math.max(lineno - context, 1)\n  var end     = Math.min(lines.length, lineno + context)\n\n  if(lineno === -1) end = lines.length\n\n  var pad     = end.toString().length\n\n  var context = lines.slice(start, end).map(function(line, i){\n    var curr = i + start\n    return (curr == lineno ? ' > ' : '   ')\n      + Array(pad - curr.toString().length + 1).join(' ')\n      + curr\n      + '| '\n      + line\n  }).join(os.EOL)\n\n  return context\n}\n\n\nvar fetchToken = exports.fetchToken = function(endpoint){\n  return function(email, pass, callback){\n    var options = {\n      'url': url.resolve(urlAddy.parse(endpoint).format(), '/token'),\n      'method': 'post',\n      'auth': {\n        'user': email,\n        'pass': pass || \"\",\n        'sendImmediately': true\n      }\n    }\n    request(options, function(e, r, obj){\n      if (e) throw e\n\n      if(r.statusCode == 417){\n        console.log()\n        console.log(\"     Update Required\".yellow, \"-\", obj)\n        console.log()\n        process.exit(1)\n      } else if(r.statusCode == 401){\n        var obj = JSON.parse(obj)\n        return callback(obj, null)\n      }else{\n        try {\n          var obj = JSON.parse(obj)\n          var c   = localCreds(endpoint).set(obj.email, obj.token.replace(os.EOL, \"\"))\n          return callback(null, c)\n        } catch(e){\n          return callback({\"messages\": [\"password required\"]})\n        }\n\n      }\n    })\n  }\n}\n\nvar abort = function(msg){\n  console.log()\n  console.log()\n  console.log(\"    Aborted\".yellow + \" -\", msg)\n  console.log()\n  process.exit(1)\n}\n\nexports.payment = function(req, stripe_pk, existing){\n  function card(cc, ep, cv, cb){\n    read({\n      silent: false,\n      prompt: \"        card number:\".grey,\n      default: cc,\n      edit: true,\n    }, function(er, cc){\n      if (cc === undefined) return abort(\"Payment not received.\")\n      read({\n        prompt: \"        exp (mo/yr):\".grey,\n        default: ep,\n        edit: true,\n      }, function(er, ep){\n        if (ep === undefined) return abort(\"Payment not received.\")\n        read({\n          prompt: \"                cvc:\".grey,\n          default: cv,\n          edit: true,\n        }, function(er, cv){\n          if (cv === undefined) return abort(\"Payment not received.\")\n          request({\n            uri: \"https://\"+ stripe_pk +\":@api.stripe.com/v1/tokens\",\n            method: \"POST\",\n            form: {\n              card: {\n                number: cc,\n                exp_month: ep.split(\"/\")[0],\n                exp_year: ep.split(\"/\")[1],\n                cvc: cv\n              }\n            }\n          }, function(e,r,b) {\n            //console.log(\"POST TOKEN RSP:\", r.statusCode)\n            if (r.statusCode == 417){\n              console.log()\n              console.log(\"     Update Required\".yellow, \"-\", obj)\n              console.log()\n              process.exit(1)\n            } else if (r.statusCode == 402){\n              var data = JSON.parse(b)\n              var msg = \"Card appears to be invalid\"\n\n              if (data.hasOwnProperty(\"error\"))\n                msg = data[\"error\"][\"param\"] + \" appears to be invalid. \"\n\n              msg += \"Please try again.\"\n              msg = msg.charAt(0).toUpperCase() + msg.substring(1)\n\n              log()\n              log(\"      \", msg.yellow)\n              return card(cc, ep, cv, cb)\n            } else if(r.statusCode == 200) {\n              var data = JSON.parse(b)\n              return cb(data.id)\n            }\n          })\n\n        })\n      })\n    })\n  }\n\n  if (existing !== null) {\n    return function(callback){\n      read({\n        prompt: (\"      Would you like to charge \" +  existing.brand + \" ending in \" + existing.last4.yellow + \"?\".blue).blue,\n        default: \"yes\",\n        edit: true\n      }, function(err, reply){\n        if (err) console.log(err)\n\n        if (reply === undefined) return abort(\"Payment not received.\")\n        if ([\"Y\", \"y\", \"Yes\", \"yes\"].indexOf(reply) !== -1){\n          callback(null)\n        } else {\n          log()\n          log(\"      Please enter new payment method...\" + \" [all payment transfers are PCI compliant]\".grey)\n          card(\"\", \"\", \"\", callback)\n        }\n      })\n    }\n  } else {\n    return function(callback){\n      log()\n      log(\"      Please enter your payment info...\" + \" [all payment transfers are PCI compliant]\".grey)\n      card(\"\", \"\", \"\", callback)\n    }\n  }\n\n}\n\nexports.validDomain = function(domain) {\n  if (domain && (isDomain(domain) === true || isDomain(urlAddy(domain).host) === true)) {\n    return true\n  } else {\n    return false\n  }\n}\n\n","/home/travis/build/npmtest/node-npmtest-surge/node_modules/surge/lib/middleware/util/creds.js":"var path        = require(\"path\")\nvar fs          = require(\"fs\")\nvar netrc       = require(\"netrc\")\nvar os          = require(\"os\")\nvar url         = require(\"url\")\nvar address     = require(\"url-parse-as-address\")\n\nmodule.exports = function(endpoint){\n  var endpoint = address.parse(endpoint)\n  var host = endpoint.host\n  \n  var getFile = function() {\n    var home = process.env[(/^win/.test(process.platform)) ? 'USERPROFILE' : 'HOME']\n    return path.join(home, \".netrc\")\n  }\n\n  var get = function(){\n    try {\n      var obj = netrc(getFile())\n    }catch(e){\n      var obj = {}\n    }\n\n    if (process.env['SURGE_LOGIN'] && process.env['SURGE_TOKEN']) {\n      return {\n        \"email\": process.env['SURGE_LOGIN'],\n        \"token\": process.env['SURGE_TOKEN']\n      }\n    // Fallback to original implementation\n    } else if (process.env['TRAVIS_SURGE_LOGIN'] && process.env['TRAVIS_SURGE_TOKEN']) {\n      return {\n        \"email\": process.env['TRAVIS_SURGE_LOGIN'],\n        \"token\": process.env['TRAVIS_SURGE_TOKEN']\n      }\n    }\n\n    if (obj.hasOwnProperty(host)) {\n      return {\n        \"email\": obj[host][\"login\"],\n        \"token\": obj[host][\"password\"]\n      }\n    } else {\n      return null\n    }\n  }\n\n  var set = function(email, token){\n    var file = getFile();\n\n    try {\n      var obj = netrc(file)\n    }catch(e){\n      var obj = {}\n    }\n\n    if(email === null){\n      delete obj[host]\n      fs.writeFileSync(file, netrc.format(obj) + os.EOL)\n      return null\n    } else {\n      obj[host] = {\n        \"login\": email,\n        \"password\": token\n      }\n      fs.writeFileSync(file, netrc.format(obj) + os.EOL)\n      return get()\n    }\n  }\n\n  return {\n    set: set,\n    get: get\n  }\n\n}\n","/home/travis/build/npmtest/node-npmtest-surge/node_modules/surge/lib/middleware/endpoint.js":"var parse = require(\"url-parse-as-address\")\n\nmodule.exports = function(req, next){\n  req.endpoint = parse(req.argv.endpoint || req.config.endpoint || \"surge.\" + req.config.platform)\n  next()\n}\n","/home/travis/build/npmtest/node-npmtest-surge/node_modules/surge/lib/middleware/pkg.js":"\nmodule.exports = function(req, next){\n  req.pkg = require(__dirname + \"/../../package.json\")\n  next()\n}","/home/travis/build/npmtest/node-npmtest-surge/node_modules/surge/lib/middleware/version.js":"var pkg = require(\"../../package.json\")\n\nmodule.exports = function(req, next){\n  if (req.argv.version || req.argv.V) {\n    console.log(pkg.version)\n  } else {\n    next()\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-surge/node_modules/surge/lib/middleware/help.js":"var helpers = require(\"./util/helpers\")\n\nmodule.exports = function(req, next){\n  if (req.argv.help || req.argv.h) {\n    helpers\n      .log()\n      .log(\"  Surge\".bold, \"– Single-command web publishing.\", (\"(v\" + req.pkg.version + \")\"). grey)\n      .log()\n      .log(\"  Usage:\".grey)\n      .log(\"    surge [options]\")\n      .log()\n      .log(\"  Options:\".grey)\n      .log(\"    -p, --project       path to projects asset directory (./)\")\n      .log(\"    -d, --domain        domain of your project (<random>.\"+ req.config.platform +\")\")\n      .log(\"    -a, --add           adds user to list of collaborators (email address)\")\n      .log(\"    -r, --remove        removes user from list of collaborators (email address)\")\n      .log(\"    -V, --version       show the version number\")\n      .log(\"    -h, --help          show this help message\")\n      .log()\n      .log(\"  Shorthand usage:\".grey)\n      .log(\"    surge [project path] [domain]\")\n      .log()\n      .log(\"  Additional commands:\".grey)\n      .log(\"    surge whoami        show who you are logged in as\")\n      .log(\"    surge logout        expire local token\")\n      .log(\"    surge login         only performs authentication step\")\n      .log(\"    surge list          list all domains you have access to\")\n      .log(\"    surge teardown      tear down a published project\")\n      .log()\n      .log(\"  Guides:\".grey)\n      .log(\"    Getting started     \" + \"surge.sh/help/getting-started-with-surge\".underline.grey)\n      .log(\"    Custom domains      \" + \"surge.sh/help/adding-a-custom-domain\".underline.grey)\n      .log(\"    Additional help     \" + \"surge.sh/help\".underline.grey)\n      .log()\n      .log(\"  When in doubt, run \".grey + \"surge\".green.underline + \" from within you project directory.\".grey)\n      .log()\n\n  } else {\n    next()\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-surge/node_modules/surge/lib/middleware/creds.js":"var path        = require(\"path\")\nvar fs          = require(\"fs\")\nvar netrc       = require(\"netrc\")\nvar localCreds  = require(\"./util/creds.js\")\nvar helpers     = require(\"./util/helpers.js\")\n\nmodule.exports = function(req, next){\n  req.creds = localCreds(req.argv.endpoint || req.config.endpoint || \"surge.\" + req.config.platform).get()\n  next()\n}\n","/home/travis/build/npmtest/node-npmtest-surge/node_modules/surge/lib/middleware/whoami.js":"var helpers     = require(\"./util/helpers\")\n\nmodule.exports = function(req, next){\n  //if (req.argv[\"_\"][\"0\"] === \"whoami\") {\n    if (req.creds) {\n      helpers.log(\"    Logged in as \" + req.creds.email.green + \".\")\n      helpers.log()\n    } else {\n      helpers.log(\"    Not currently authenticated.\")\n      helpers.log()\n    }\n\n    process.exit()\n  // } else {\n  //   next()\n  // }\n}\n","/home/travis/build/npmtest/node-npmtest-surge/node_modules/surge/lib/middleware/logout.js":"var helpers     = require(\"./util/helpers\")\nvar localCreds  = require(\"./util/creds.js\")\nvar path = require(\"path\")\n\nmodule.exports = function(req, next){\n  var creds = localCreds(req.argv.endpoint || req.config.endpoint || 'surge.' + req.config.platform).set(null)\n\n  if (req.creds) {\n    var filePath = path.join(process.env[(/^win/.test(process.platform)) ? 'USERPROFILE' : 'HOME'], \".netrc\")\n    helpers.log(\"    Token removed from \" + filePath.grey + \" file.\")\n  } else {\n    helpers.log(\"    Not currently authenticated.\")\n  }\n\n  next()\n\n}\n","/home/travis/build/npmtest/node-npmtest-surge/node_modules/surge/lib/middleware/tokencheck.js":"var request     = require(\"request\")\nvar localCreds  = require(\"./util/creds.js\")\nvar helpers     = require(\"./util/helpers.js\")\nvar os          = require('os')\nvar url         = require(\"url\")\nvar parseUrl    = require(\"url-parse-as-address\")\n\nmodule.exports = function(req, next){\n  if (req.creds) {\n    req.authed = true\n    next()\n    // helpers.fetchToken(req.argv.endpoint)(\"token\", req.creds.token, function(err, obj){\n    //   if (err) {\n    //     localCreds(req.argv.endpoint).set(null)\n    //     req.creds  = null\n    //     req.authed = false\n    //     next()\n    //     //auth(req, next)\n    //   } else {\n    //     req.creds  = localCreds(req.argv.endpoint).set(obj.email, obj.token)\n    //     req.authed = true\n    //     next()\n    //   }\n    // })\n  } else {\n    next()\n  }\n\n}\n","/home/travis/build/npmtest/node-npmtest-surge/node_modules/surge/lib/middleware/email.js":"var pattern = /^((([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z]|\\d|[!#\\$%&'\\*\\+\\-\\/=\\?\\^_`{\\|}~]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*)|((\\x22)((((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(([\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x7f]|\\x21|[\\x23-\\x5b]|[\\x5d-\\x7e]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(\\\\([\\x01-\\x09\\x0b\\x0c\\x0d-\\x7f]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]))))*(((\\x20|\\x09)*(\\x0d\\x0a))?(\\x20|\\x09)+)?(\\x22)))@((([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|\\d|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.)+(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])|(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])([a-z]|\\d|-|\\.|_|~|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])*([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])))\\.?$/i\n\nmodule.exports = function(req, next, abort){\n  var label = \"              email:\".grey\n\n  if (req.authed) {\n    console.log(label, req.creds.email)\n    return next()\n  } else {\n    var ask = function(suggestion){\n      req.read({\n        silent: false,\n        prompt: label,\n        default: suggestion,\n        edit: true,\n        terminal: req.config.terminal,\n        output: req.config.output,\n        input: req.config.input\n      }, function(err, answer){\n        if (answer === undefined) return abort(\"not authenticated.\")\n        if (!pattern.test(answer)){\n          // console.log()\n          // console.log(\"    Invalid\".yellow, \"-\".grey, \"please enter valid email address.\".grey)\n          // console.log()\n          return ask(answer)\n        } else {\n          req.email = answer\n          return next()\n        }\n      })\n    }\n    return ask()\n  }\n\n}","/home/travis/build/npmtest/node-npmtest-surge/node_modules/surge/lib/middleware/auth.js":"var request     = require(\"request\")\nvar localCreds  = require(\"./util/creds.js\")\nvar helpers     = require(\"./util/helpers.js\")\nvar os          = require('os')\nvar url         = require(\"url\")\nvar parseUrl    = require(\"url-parse-as-address\")\n\nmodule.exports = function(req, next, abort){\n  var count = 0\n  var label = \"           password:\".grey\n\n  var auth = function(){\n    var out = req.config.output\n    if (out) out.isTTY = false\n\n    req.read({\n      prompt: label,\n      silent: true,\n      edit: false,\n      output: out,\n      input: req.config.input\n    }, function(err, password){\n      if (password === undefined) return abort(\"not authenticated.\")\n      helpers.fetchToken(req.argv.endpoint || req.config.endpoint || 'surge.' + req.config.platform)(req.email, password, function(err, obj){\n        if (err) {\n          count++\n          if (err.hasOwnProperty(\"details\") && err[\"details\"].hasOwnProperty(\"email\")) process.exit(1)\n\n          if (count >=3) {\n            req.read({\n              prompt: \"    forgot password?\".grey,\n              default: \"yes\",\n              terminal: req.config.terminal,\n              output: req.config.output,\n              input: req.config.input\n            }, function(err, reply){\n              if (reply == \"yes\" || reply == \"y\" || reply == \"Y\") {\n\n                var options = {\n                  'url': url.resolve(req.endpoint, \"/token/reset/\" + req.email),\n                  'method': 'post'\n                }\n\n                request(options, function(e, r, obj){\n                  if (e) throw e\n                  if (r.statusCode == 201) {\n                    console.log()\n                    console.log(\"    Password Recovery\".yellow, \"- reset instructions sent to\", req.email.green)\n                    console.log()\n                    process.exit(1)\n                  } else {\n                    console.log()\n                    console.log(\"    Oops\".red, \"- something went wrong trying to reset your password.\")\n                    console.log()\n                    process.exit(1)\n                  }\n                })\n              } else {\n                console.log()\n                console.log(\"    Aborted\".yellow, \"- no password reset sent.\", req.email.green)\n                console.log()\n                process.exit(1)\n              }\n\n\n            })\n          } else {\n            return auth()\n          }\n        } else {\n          req.creds = localCreds(req.argv.endpoint || req.config.endpoint || 'surge.' + req.config.platform).set(obj.email, obj.token)\n          return next()\n        }\n      })\n    })\n  }\n\n  if (req.authed) {\n    console.log(\"              token:\".grey, \"*****************\".grey)\n    return next()\n  } else {\n    return auth()\n  }\n\n}\n","/home/travis/build/npmtest/node-npmtest-surge/node_modules/surge/lib/middleware/login.js":"var path = require(\"path\")\nvar helpers = require(\"./util/helpers\")\n\nmodule.exports = function(req, next){\n  helpers.log()\n  helpers.log(\"    Logged in as \" + req.creds.email.green + \".\")\n  next()\n\n  //helpers.log(\"              token: \".grey + req.creds.token)\n\n}\n","/home/travis/build/npmtest/node-npmtest-surge/node_modules/surge/lib/middleware/list.js":"var url         = require(\"url\")\nvar request     = require(\"request\")\n\nmodule.exports = function(req, next){\n\n  var options = {\n    'url': url.resolve(req.endpoint, '/list'),\n    'method': 'get',\n    'auth': {\n      'user': \"token\",\n      'pass': req.creds.token,\n      'sendImmediately': true\n    }\n  }\n\n  request(options, function(e, r, obj){\n    if (e) throw e\n    var list = JSON.parse(obj)\n    console.log()\n    if (list.length != 0) {\n      list.forEach(function(project){\n        console.log(\"      \" + project)\n      })\n    } else {\n      console.log(\"    Empty\".yellow, \"- No Projects found.\")\n    }\n    next()\n  })\n\n}","/home/travis/build/npmtest/node-npmtest-surge/node_modules/surge/lib/middleware/plus.js":"\nvar request     = require(\"request\")\nvar url         = require(\"url\")\nvar helpers     = require(\"./util/helpers\")\nvar path        = require(\"path\")\nvar fs          = require(\"fs\")\nvar os          = require(\"os\")\nvar parseUrl    = require(\"url-parse-as-address\")\n\nmodule.exports = function(req, next, abort){\n\n  var plus = function(domain){\n    var options = {\n      'url': url.resolve(req.endpoint, domain + \"/subscription\"),\n      'method': 'get',\n      'auth': {\n        'user': \"token\",\n        'pass': req.creds.token,\n        'sendImmediately': true\n      }\n    }\n\n    request(options, function(e, r, obj){\n      if (e) throw e\n\n      var payload = JSON.parse(obj)\n\n      var msg = \"      Project requires the \".blue  + payload.plan.name.yellow + \" plan. \".blue + (\"$\" + (payload.plan.amount / 100) + \"/mo\").yellow + \" (cancel anytime).\".blue\n\n      helpers.log()\n      if (payload.hasOwnProperty(\"perks\")) {\n        helpers.log(msg += \" This plan provides...\".blue)\n        payload.perks.forEach(function(perk){\n          helpers.log((\"          - \" + perk).blue)\n        })\n      } else {\n        helpers.log(msg)\n      }\n\n      helpers.payment(req, payload[\"stripe_pk\"], payload.card)(function(token){\n        var uri = url.resolve(req.endpoint, domain + \"/subscription\")\n        request({\n          uri: uri,\n          method: \"PUT\",\n          auth: {\n            'user': 'token',\n            'pass': req.creds.token,\n            'sendImmediately': true\n          },\n          form: {\n            plan: payload.plan,\n            token: token\n          }\n        }, function(e,r,b){\n          if (r.statusCode == 201) {\n            if (token === null) console.log()\n            var sub = JSON.parse(b)\n            console.log(\"               plan:\".grey, sub.plan.name)\n            console.log()\n            console.log((\"      You are now upgraded to \" + sub.plan.name + \"!\").green)\n            console.log()\n          } else if (r.statusCode == 200) {\n            var sub = JSON.parse(b)\n            console.log(\"               plan:\".grey, sub.plan.name)\n            console.log()\n            console.log((\"      No charge created. You are already upgraded to \" + sub.plan.name + \"!\").green)\n            console.log()\n          } else {\n            console.log(r.statusCode)\n          }\n        })\n      })\n      //process.exit()\n    })\n\n  }\n\n  return plus(parseUrl(req.domain).hostname)\n\n}\n","/home/travis/build/npmtest/node-npmtest-surge/node_modules/surge/lib/middleware/ssl.js":"var request     = require(\"request\")\nvar url         = require(\"url\")\nvar helpers     = require(\"./util/helpers\")\nvar path        = require(\"path\")\nvar fs          = require(\"fs\")\nvar os          = require(\"os\")\nvar split       = require(\"split\")\nvar parseUrl    = require(\"url-parse-as-address\")\n\nmodule.exports = function(req, next, abort){\n\n    var upload = function(req, next, abort){\n      var uri = url.resolve(req.endpoint, path.join(req.domain, \"ssl\"))\n      var handshake = request.put(uri, { \"version\" : req.pkg.version })\n\n      // apply basic auth\n      handshake.auth(\"token\", req.creds.token, true)\n\n      // catch errors\n      handshake.on('error', function(d){\n        console.log(d)\n      })\n\n      // split replies on new line\n      handshake.pipe(split())\n\n      // output result\n      handshake.on(\"data\", function(data){\n        var payload = JSON.parse(data.toString())\n        if (payload.hasOwnProperty(\"type\") && payload[\"type\"] == \"collect\"){\n          var msg = \"      Project requires the \".blue  + payload.plan.name.yellow + \" plan. \".blue + (\"$\" + (payload.plan.amount / 100) + \"/mo\").yellow + \" (cancel anytime).\".blue\n          helpers.log()\n          if (payload.hasOwnProperty(\"perks\")) {\n            helpers.log(msg += \" This plan provides...\".blue)\n            payload.perks.forEach(function(perk){\n              helpers.log((\"          - \" + perk).blue)\n            })\n          } else {\n            helpers.log(msg)\n          }\n          helpers.payment(req, payload[\"stripe_pk\"], payload.card)(function(token){\n            var uri = url.resolve(req.endpoint, req.domain + \"/subscription\")\n            request({\n              uri: uri,\n              method: \"PUT\",\n              auth: {\n                'user': 'token',\n                'pass': req.creds.token,\n                'sendImmediately': true\n              },\n              form: {\n                plan: payload.plan,\n                token: token\n              }\n            }, function(e,r,b){\n              if (r.statusCode == 201) {\n                //if (token === null) console.log()\n                //next()\n                //var sub = JSON.parse(b)\n                //console.log(\"               plan:\".grey, sub.plan.name)\n              }\n            })\n          })\n        } else if (payload.hasOwnProperty(\"type\") && payload[\"type\"] == \"subscription\"){\n          // if (payload.data) {\n          //   console.log(\"               plan:\".grey, payload.data.plan.name)\n          // } else {\n          //   console.log(\"               plan:\".grey, \"Free\")\n          // }\n        } else if (payload.hasOwnProperty(\"type\") && payload[\"type\"] == \"msg\"){\n          console.log()\n          if (payload.payload[\"status\"] == \"ok\") {\n            console.log(\"    Success\".green, \"-\", payload.payload[\"msg\"])\n          } else {\n            console.log(\"    Error\".yellow, \"-\", payload.payload[\"msg\"])\n          }\n          console.log()\n        }\n\n      })\n\n      // done\n      handshake.on(\"end\", function(){\n        // console.log()\n        // console.log(\"   Success!\".green, \"-\", \"ssl cert has been added to\", req.domain)\n        // console.log()\n        // process.exit()\n      })\n\n      handshake.on(\"response\", function(rsp){\n        console.log()\n        // if (rsp.statusCode == 403) {\n        //   helpers.log()\n        //   helpers.log(\"    Unauthorized\".yellow + \" - you do not have publish access to\", req.domain)\n        //   helpers.log()\n        //   process.exit()\n        // } else if (rsp.statusCode == 400) {\n        //   helpers.log()\n        //   helpers.log(\"    SSL Fail\".red, \"-\", \"pem file is invalid.\")\n        //   helpers.log()\n        //   process.exit()\n        // } else if (rsp.statusCode == 202) {\n        //   helpers.log()\n        //   helpers.log(\"    SSL Pass\".green, \"-\", \"your pem file has been added to\", req.domain)\n        //   helpers.log()\n        //   process.exit()\n        // }\n      })\n\n      var pem = fs.createReadStream(req.pem)\n      pem.pipe(handshake)\n    }\n\n\n    var mPem = function(req, next, abort){\n      var label = \"           pem file:\".grey\n      var pemPath\n      var getPem = function(placeholder){\n        req.read({\n          prompt: label,\n          default: placeholder,\n          edit: true,\n          terminal: req.config.terminal,\n          output: req.config.output,\n          input: req.config.input\n        }, function(err, pem){\n          if (pem === undefined) return abort(\"no PEM file provided\")\n          if (pem === \"\") return getPem()\n          var pemPath = path.resolve(pem || \"\")\n          if (!fs.existsSync(pemPath)) return getPem(pem)\n          req.pem = pemPath\n          return upload(req, next, abort)\n        })\n      }\n\n      var pem = req.argv[\"pem\"]\n      pemPath = path.resolve(pem || \"\")\n\n      if (pem && fs.existsSync(pemPath)) {\n        req.pem = pemPath\n        console.log(label, pemPath)\n        return upload(req, next, abort)\n      } else {\n        return getPem()\n      }\n\n    }\n\n  return mPem(req, next, abort)\n\n}\n","/home/travis/build/npmtest/node-npmtest-surge/node_modules/surge/lib/middleware/teardown.js":"\nvar request     = require(\"request\")\nvar url         = require(\"url\")\nvar helpers     = require(\"./util/helpers\")\nvar path        = require(\"path\")\nvar fs          = require(\"fs\")\nvar os          = require(\"os\")\nvar parseUrl    = require(\"url-parse-as-address\")\n\nmodule.exports = function(req, next, abort){\n\n  var remove = function(domain){\n    var options = {\n      'url': url.resolve(req.endpoint, domain),\n      'method': 'delete',\n      'auth': {\n        'user': \"token\",\n        'pass': req.creds.token,\n        'sendImmediately': true\n      }\n    }\n\n    request(options, function(e, r, obj){\n      if (e) throw e\n\n      if (r.statusCode == 200 || r.statusCode == 204 || r.statusCode == 210) {\n        helpers.log()\n        helpers.log(\"    Success\".green + \" - \" + domain + \" has been removed.\")\n        helpers.log()\n        process.exit()\n      } else if (r.statusCode == 403) {\n        helpers.log()\n        helpers.log(\"    Aborted\".yellow + \" - unable to remove\", domain)\n        helpers.log()\n        process.exit(1)\n      } else {\n        helpers.log()\n        helpers.log(obj)\n        helpers.log()\n        process.exit()\n      }\n    })\n  }\n\n  return remove(parseUrl(req.domain).host)\n\n}\n","/home/travis/build/npmtest/node-npmtest-surge/node_modules/surge/lib/middleware/shorthand.js":"var path = require(\"path\")\nvar fs   = require(\"fs\")\n\nmodule.exports = function(req, next){\n  req.project = req.argv.project || req.argv.p || req.argv[\"_\"][0] || null\n  req.domain  = req.argv.domain  || req.argv.d || req.argv[\"_\"][1] || null\n  next()\n}","/home/travis/build/npmtest/node-npmtest-surge/node_modules/surge/lib/middleware/project.js":"var path = require(\"path\")\nvar fs   = require(\"fs\")\nvar helpers = require(\"./util/helpers\")\n\nmodule.exports = function(req, next, abort){\n  var label = \"       project path:\".grey\n\n  if (req.project || req.argv.project || req.argv[\"_\"][0]) {\n    req.project = req.project || path.resolve(req.argv.project || req.argv[\"_\"][0] || \"\")\n\n    fs.exists(req.project, function(exists){\n      if (exists) {\n        helpers.log(\"       project path:\".grey, req.project)\n        next()\n      } else {\n        helpers.log()\n        helpers.log(\"    Aborted\".yellow, \"-\", \"No such file or directory.\")\n        helpers.log(\"   \", req.project.red)\n        helpers.log()\n        process.exit(1)\n      }\n    })\n  } else {\n    var ask = function(suggestion){\n      req.read({\n        silent: false,\n        prompt: label,\n        default: suggestion,\n        edit: true,\n        terminal: req.config.terminal,\n        output: req.config.output,\n        input: req.config.input\n      }, function(err, projectPath){\n        if (projectPath === undefined) return abort(\"publishing not initiated.\")\n        if (!fs.existsSync(path.resolve(projectPath))){\n          console.log(\"                    \", \"please enter valid project path...\".grey)\n          return ask(projectPath)\n        } else {\n          req.project = path.resolve(projectPath)\n          return next()\n        }\n      })\n    }\n\n    var x = path.resolve(\"./\")\n    return ask(path.join(x, path.sep))\n  }\n\n}\n","/home/travis/build/npmtest/node-npmtest-surge/node_modules/surge/lib/middleware/size.js":"var du        = require(\"du\")\nvar helpers   = require(\"./util/helpers\")\nvar fsReader  = require('fstream-ignore')\nvar fs        = require(\"fs\")\nvar ignore    = require(\"surge-ignore\")\n\nfunction humanFileSize(bytes, si) {\n    var thresh = si ? 1000 : 1024;\n    if(bytes < thresh) return bytes + ' bytes';\n    var units = si ? ['kB','MB','GB','TB','PB','EB','ZB','YB'] : ['KB','MB','GB','TB','PB','EB','ZB','YB'];\n    var u = -1;\n    do {\n        bytes /= thresh;\n        ++u;\n    } while(bytes >= thresh);\n    return bytes.toFixed(1)+' '+units[u];\n}\n\nmodule.exports = function(req, next){\n  //process.stdout.write(\"               size:\".grey, \"checking...\")\n  process.stdout.write(\"               size: \".grey)\n\n  req.projectSize = 0;\n  req.fileCount = 0\n  var project = fsReader({ 'path': req.project, ignoreFiles: [\".surgeignore\"] })\n  project.addIgnoreRules(ignore)\n\n  project.on(\"child\", function (c) {\n    fs.lstat(c.path, function(err, stats) {\n      req.projectSize += stats.size\n      if (!stats.isDirectory()) req.fileCount++\n    })\n  }).on(\"close\", function(){\n    helpers.log(req.fileCount + \" files,\", humanFileSize(req.projectSize))\n    next()\n  })\n\n}\n","/home/travis/build/npmtest/node-npmtest-surge/node_modules/surge-ignore/index.js":"// Surge Ignore\n// ============\n//\n// The default things we ignore when you\n// deploy to Surge. https://surge.sh\n//\n// 1. We really don’t want your `.git` directory\n// 2. We don’t need any dotfiles, like `.DS_Store`\n// 3. Vim temp files. See Issue #1.\n// 4. We don’t want `node_modules/` since those should\n//    already be compiled in somehow. Developers can opt-out\n//    of this by adding `!node_modules/` to their `.surgeignore`.\n// 5. Same goes for Bower as npm.\n\nmodule.exports = [\n  \".git\",             // [1]\n  \".*\",               // [2]\n  \"*.*~\",             // [3]\n  \"node_modules\",     // [4]\n  \"bower_components\"  // [5]\n]\n","/home/travis/build/npmtest/node-npmtest-surge/node_modules/surge/lib/middleware/domain.js":"var helpers = require(\"./util/helpers\")\nvar moniker = require(\"moniker\")\nvar fs = require(\"fs\")\nvar path = require(\"path\")\nvar os = require(\"os\")\n\nmodule.exports = function(req, next, abort){\n  var label = \"             domain:\".grey\n\n  // try {\n  //   req.domain = req.argv.domain || fs.readFileSync(path.join(req.project, \"CNAME\")).toString()\n  //   req.domain = req.domain.split(os.EOL)[0].trim()\n\n  //   if (!helpers.validDomain(req.domain)) {\n  //     return getDomain(req.domain, next)\n  //   } else {\n  //     console.log(label, req.domain)\n  //     return next()\n  //   }\n  // } catch(e) {\n  //   return getDomain(moniker.choose() + \".surge.sh\")   // prompt with a suggestion\n  // }\n\n  function getDomain(suggestion){\n    helpers.read({\n      silent: false,\n      prompt: label,\n      default: suggestion || \"\",\n      edit: true,\n      terminal: req.config.terminal,\n      output: req.config.output,\n      input: req.config.input\n    }, function(err, domain){\n      if (domain === undefined) return abort(\"Please try again with a valid domain name.\")\n      if (err || !helpers.validDomain(domain)) {\n        console.log(\"                    \", \"Please enter valid domain name…\".grey)\n        return getDomain(domain)\n      }\n      req.domain = domain\n      return next()\n    })\n  }\n\n  if (helpers.validDomain(req.domain)) {\n    console.log(label, req.domain)\n    next()\n  } else {\n    if (req.domain == \"_\"){\n      req.domain = [moniker.choose(), req.config.platform].join(\".\")\n      console.log(label, req.domain)\n      next()\n    } else {\n      getDomain(req.suggestedDomain)  \n    }\n    \n  }\n}\n","/home/travis/build/npmtest/node-npmtest-surge/node_modules/surge/lib/middleware/protocol.js":"var url = require(\"url\")\n\nmodule.exports = function(req, next){\n  req.ssl = null\n  var u   = url.parse(req.domain)\n\n  if (u.protocol !== null) {\n    if (u.protocol == \"https:\") req.ssl = true\n    if (u.protocol == \"http:\") req.ssl = false\n    req.domain = u.hostname\n  }\n\n  next()\n}","/home/travis/build/npmtest/node-npmtest-surge/node_modules/surge/lib/middleware/deploy.js":"var fs = require(\"fs\")\nvar request   = require(\"request\")\nvar helpers   = require('./util/helpers')\nvar localCreds  = require(\"./util/creds.js\")\nvar tar  = require('tar')\nvar zlib = require('zlib')\nvar fsReader  = require('fstream-ignore')\nvar surge    = require('../surge')\nvar ProgressBar = require(\"progress\")\nvar split = require(\"split\")\nvar url = require(\"url\")\nvar ignore = require(\"surge-ignore\")\n\n\nmodule.exports = function(req, next){\n\n\n  /**\n   * Some useful metadata\n   */\n\n  var headers = {\n    \"version\" : req.pkg.version,\n    \"file-count\": req.fileCount,\n    \"project-size\": req.projectSize\n  }\n\n\n  /**\n   * Collaborators to add\n   */\n\n  if (req.argv.a)\n    headers[\"add\"] = req.argv.a;\n\n\n  /**\n   * Collaborators to remove\n   */\n\n  if (req.argv.r)\n    headers[\"rem\"] = req.argv.r;\n\n\n  /**\n   * Perform build on server\n   */\n\n  if (req.argv.build)\n    headers[\"build\"] = req.argv.build;\n\n\n  /**\n   * Force Protocol?\n   */\n\n  if (req.ssl !== null)\n    headers[\"ssl\"] = req.ssl\n\n  /**\n   * Progress Bars\n   */\n\n  var progress = {}\n\n\n  /**\n   * Our upload \"data\" handle\n   */\n\n  var tick = function(tick){\n    if (Object.keys(progress).length > 1) global.ponr = true\n\n    //try {\n\n      try {\n        var payload  = JSON.parse(tick.toString())\n      } catch(e) {\n        //console.log(e)\n        return;\n      }\n\n\n      if (payload.hasOwnProperty(\"type\") && payload.type === \"error\") {\n        console.log()\n        console.log()\n        helpers.log(\"   Processing Error:\".yellow, payload.error.filename).log()\n\n        console.log(helpers.stacktrace(payload.error.stack, { lineno: payload.error.lineno }))\n        helpers.log()\n        console.log(\"  \", payload.error.message)\n\n        console.log()\n        process.exit(1)\n        req.status = req.status || \"Compile Error\"\n      } else\n\n      if (payload.hasOwnProperty(\"type\") && payload.type === \"users\") {\n        helpers.log(\"              users:\".grey, payload.users.join(\", \"))\n      } else\n\n      if (payload.hasOwnProperty(\"type\") && payload.type === \"collect\") {\n        var msg = \"      Project requires the \".blue  + payload.plan.name.yellow + \" plan. \".blue + (\"$\" + (payload.plan.amount / 100) + \"/mo\").yellow + \" (cancel anytime).\".blue\n\n        helpers.log()\n        if (payload.hasOwnProperty(\"perks\")) {\n          helpers.log(msg += \" This plan provides...\".blue)\n          payload.perks.forEach(function(perk){\n            helpers.log((\"          - \" + perk).blue)\n          })\n        } else {\n          helpers.log(msg)\n        }\n\n        helpers.payment(req, payload[\"stripe_pk\"], payload.card)(function(token){\n          //console.log(token)\n          var uri = url.resolve(req.endpoint, req.domain + \"/subscription\")\n          request({\n            uri: uri,\n            method: \"PUT\",\n            auth: {\n              'user': 'token',\n              'pass': req.creds.token,\n              'sendImmediately': true\n            },\n            form: {\n              plan: payload.plan,\n              token: token\n            }\n          }, function(e,r,b){\n            if (r.statusCode == 201 || r.statusCode == 200) {\n              console.log()\n              //if (token === null) console.log()\n              //var sub = JSON.parse(b)\n              //console.log(\"               plan:\".grey, sub.plan.name)\n            }\n          })\n        })\n\n        // prompt for user\n      } else\n      if (payload.hasOwnProperty(\"type\") && payload.type === \"ip\") {\n        if (payload.data) {\n          console.log(\"         IP Address:\".grey, payload.data.ip)\n        }\n      } else\n      if (payload.hasOwnProperty(\"type\") && payload.type === \"event_registration\") {\n        if (payload.data) {\n          console.log()\n          console.log((\"             \" + payload.data.event.name + \" is set!\").bold)\n\n          if (payload.data.event.start)\n            console.log(\"              start:\".grey, payload.data.event.start)\n          \n          if (payload.data.event.end)\n            console.log(\"                end:\".grey, payload.data.event.end)\n\n          if (payload.data.event.website)\n            console.log(\"            website:\".grey, payload.data.event.website)\n\n          if (payload.data.event.email)\n            console.log(\"              email:\".grey, payload.data.event.email)\n\n          if (payload.data.event.twitter)\n            console.log(\"            twitter:\".grey, payload.data.event.twitter)\n        }\n      } else\n\n\n      if (payload.hasOwnProperty(\"type\") && payload.type === \"event_participant\") {\n        \n        if (payload.data) {\n          console.log()\n\n          // end time\n          var out = [\"      You are in \".grey + payload.data.event.name.bold + \"!\".grey]\n          if (payload.data.event.endTime)\n            out.push(\"Competition ends in \".grey + payload.data.event.endTime.toString().green)\n\n          // output\n          console.log(out.join(\" \"))\n\n          // help bar\n          out = [\"        w: \".grey + payload.data.event.website + \"  e: \".grey + payload.data.event.email]\n\n          // if (payload.data.event.website)\n          //   console.log(\"            website:\".grey, payload.data.event.website)\n\n          // if (payload.data.event.email)\n          //   console.log(\"              email:\".grey, payload.data.event.email)\n\n          if (payload.data.event.twitter)\n            out.push(\"  t: \".grey, payload.data.event.twitter)\n\n          console.log(out.join(\"\"))\n        }\n      } else\n\n\n\n      if (payload.hasOwnProperty(\"type\") && payload.type === \"subscription\") {\n        if (payload.data) {\n          console.log(\"               plan:\".grey, payload.data.plan.name)\n        } else {\n          console.log(\"               plan:\".grey, \"Free\")\n        }\n      } else {\n        try {\n          // we have two different display for the progress bars\n          var displays = {\n            \"upload\": ('             upload:').grey + ' [:bar] :percent, eta: :etas',\n               \"cdn\": ('   propagate on CDN:').grey + ' [:bar] :percent :file'\n          }\n\n          // create progress bar (if one doesnt exist)\n          progress[payload.id] = progress[payload.id] || new ProgressBar(displays[payload.id], {\n            complete: '=',\n            incomplete: ' ',\n            width: 20,\n            total: payload.total\n          })\n\n          // clear file name on last update\n          var file = payload.written >= payload.total\n            ? \"\"\n            : payload.file\n\n          // refresh view\n          progress[payload.id].update(payload.written / payload.total, { file: file })\n        } catch(e){\n          //console.log(e)\n        }\n\n      }\n    // } catch(e) {\n    //   console.log(\"CATCH\", e)\n    // }\n  }\n\n  var verbose = function(line){\n    console.log(\"N\", line.toString())\n  }\n\n\n  /**\n   * Upload\n   */\n\n  // create upload\n  var uri = url.resolve(req.endpoint, req.domain)\n  var handshake = request.put(uri, { headers: headers })\n\n  // apply basic auth\n  handshake.auth(\"token\", req.creds.token, true)\n\n  // catch errors\n  handshake.on('error', console.log)\n\n  // split replies on new line\n  handshake.pipe(split())\n\n  // output result\n  handshake.on(\"data\", tick)\n\n  // done\n  handshake.on(\"end\", next)\n\n  handshake.on(\"response\", function(rsp){\n    if (rsp.statusCode == 403) {\n      helpers.log()\n      if(rsp.headers.hasOwnProperty(\"reason\")){\n        helpers.log(\"    Aborted\".yellow + \" - \" + rsp.headers[\"reason\"])\n      } else {\n        helpers.log(\"    Aborted\".yellow + \" - you do not have permission to publish to \" + req.domain)\n      }\n      helpers.log()\n      process.exit(1)\n    } else if (rsp.statusCode == 401) {\n      localCreds(req.argv.endpoint).set(null)\n      helpers.log()\n      if(rsp.headers.hasOwnProperty(\"reason\")){\n        helpers.log(\"    Aborted\".yellow + \" - \" + rsp.headers[\"reason\"])\n      } else {\n        helpers.log(\"    Aborted\".yellow + \" - local token has expired and cleared. please try again.\")\n      }\n      helpers.log()\n      process.exit(1)\n      // console.log(rsp.statusCode)\n    }\n  })\n\n  // Read Project\n  var project = fsReader({ 'path': req.project, ignoreFiles: [\".surgeignore\"] })\n\n  // we always ignore .git directory\n  project.addIgnoreRules(ignore)\n\n  // chain all this together...\n  project\n    .pipe(tar.Pack())\n    .pipe(zlib.Gzip())\n    .pipe(handshake)\n\n}\n","/home/travis/build/npmtest/node-npmtest-surge/node_modules/surge/lib/middleware/ipaddress.js":"module.exports = function(req, next){\n\n  if (req.status) {\n\n  } else {\n    console.log()\n    console.log(\"    Success!\".green + \" Project is published and running at \" + req.domain.green.underline)\n    console.log(\"\")\n  }\n\n  next()\n}","/home/travis/build/npmtest/node-npmtest-surge/node_modules/surge/lib/middleware/util/skin.js":"\n// lets onion skin cli!!\n//\nmodule.exports = function(req, stack, abort){\n\n  abort = abort || function(msg){\n    console.log(\"\\n\")\n    msg === null\n      ? console.log(\"    Aborted\".yellow)\n      : console.log(\"    Aborted\".yellow, \"-\", msg)\n    console.log()\n  }\n\n  var that  = this\n  var index = 0\n\n  function next(err){\n    var layer = stack[index++]\n    if(!layer) return\n    layer.call(that, req, next, abort)\n  }\n\n  return next()\n}","/home/travis/build/npmtest/node-npmtest-surge/node_modules/surge/lib/middleware/welcome.js":"var helpers     = require(\"./util/helpers.js\")\n\nmodule.exports = function(req, next){\n  if (req.creds == null) {\n    helpers.log(\"    Welcome to \" + (req.config.name || \"Surge\").bold + \"! (\" + req.config.platform +\")\" )\n    if (req.config.name) {\n      helpers.log(\"    Powered by Surge\".grey).hr()\n    }\n    helpers.log(\"    Please login or create an account by entering your email and password:\").hr()\n  } else {\n    if(req.config.name){\n      helpers.log(\"    \" + req.config.name.bold + \" - \" + (req.config.platform || \"surge.sh\"))\n      helpers.log(\"    Powered by Surge\".grey)\n    } else {\n      helpers.log(\"    Surge\".bold + \" - surge.sh\")\n    }\n    helpers.hr()\n  }\n  next()\n}","/home/travis/build/npmtest/node-npmtest-surge/node_modules/surge/lib/middleware/token.js":"var path = require(\"path\")\nvar helpers = require(\"./util/helpers\")\n\nmodule.exports = function(req, next){\n  helpers.log(\"              token: \".grey + req.creds.token)\n  next()\n}","/home/travis/build/npmtest/node-npmtest-surge/node_modules/surge/lib/middleware/discovery.js":"\nvar moniker = require(\"moniker\")\nvar fs      = require(\"fs\")\nvar path    = require(\"path\")\nvar os      = require(\"os\")\nvar helpers = require(\"./util/helpers\")\n\nexports.suggestDomainFromCname = function(req, next){\n\n  if (!req.domain && !req.suggestedDomain) {\n    try {\n      var cname = fs.readFileSync(path.join(req.project || process.cwd(), \"CNAME\")).toString()\n      req.suggestedDomain = cname.split(os.EOL)[0].trim()\n    }\n    catch(e) {\n      // console.log(e) // This will produce a visible error when there’s no CNAME file\n    }\n  }\n\n  return next()\n}\n\nexports.setDomainFromCname = function(req, next){\n  if (!req.domain && !req.suggestedDomain) {\n\n    try {\n      var cname = fs.readFileSync(path.join(req.project || process.cwd(), \"CNAME\")).toString()\n      req.domain = cname.split(os.EOL)[0].trim()\n    } catch(e) {}\n  }\n  return next()\n}\n\nexports.suggestDomainFromGenerator = function(req, next){\n  if (!req.domain && !req.suggestedDomain) {\n    req.suggestedDomain = [moniker.choose(), req.config.platform].join(\".\")\n  }\n  return next()\n}\n\nexports.setDomainFromArgs = function(req, next){\n  if (!req.domain && req.argv._[0]) {\n    req.domain = req.argv._[0]\n  }\n  return next()\n}\n\n\n\n","/home/travis/build/npmtest/node-npmtest-surge/node_modules/surge/lib/middleware/log.js":"module.exports = function(req, next){\n  console.log(req.argv)\n  console.log(req.args)\n  next()\n}","/home/travis/build/npmtest/node-npmtest-surge/node_modules/surge/lib/cli.js":"#!/usr/bin/env node\n\nvar surge = require(\"../\")({ default: \"publish\" })\n\nsurge(process.argv.slice(2))\n\nprocess.on('SIGINT', function() {\n  console.log(\"\\n\")\n  global.ponr == true\n    ? console.log(\"    Disconnected\".green, \"-\", \"Past point of no return, completing in background.\")\n    : console.log(\"    Cancelled\".yellow, \"-\", \"Upload aborted, publish not initiated.\")\n  console.log()\n  process.exit(1)\n})\n\n","/home/travis/build/npmtest/node-npmtest-surge/node_modules/surge/lib/middleware/prep.js":"var fs   = require(\"fs\")\nvar path = require(\"path\")\nvar tar  = require('tar')\nvar zlib = require('zlib')\nvar fsReader  = require('fstream-ignore')\nvar ignore = require(\"surge-ignore\")\n\nmodule.exports = function(req, next){\n  var pack = tar.Pack()\n  var zip = zlib.Gzip()\n  var project = fsReader({ 'path': req.project, ignoreFiles: [\".surgeignore\"] })\n  project.addIgnoreRules(ignore)\n\n  req.tarballPath = path.resolve(\"/tmp/\", Math.random().toString().split(\".\")[1] + \".tar\")\n\n  var tarball = fs.createWriteStream(req.tarballPath)\n\n  tarball.on(\"finish\", function(e){\n    next()\n  })\n\n  project.pipe(pack).pipe(zip).pipe(tarball)\n}\n","/home/travis/build/npmtest/node-npmtest-surge/node_modules/surge/lib/middleware/stats.js":"\nvar request     = require(\"request\")\nvar url         = require(\"url\")\nvar helpers     = require(\"./util/helpers\")\nvar path        = require(\"path\")\nvar fs          = require(\"fs\")\nvar os          = require(\"os\")\nvar opn         = require(\"opn\")\n\nmodule.exports = function(req, next, abort){\n  if (req.argv[\"_\"][0] !== \"stats\") {\n    return next()\n  } else {\n\n    var stats = function(domain){\n      var u = url.resolve(req.endpoint, domain)\n      console.log(u)\n      opn(u, 'firefox')\n    }\n\n    var label = \"             domain:\".grey\n\n    var getDomain = function(suggestion){\n      req.read({\n        prompt: label,\n        default: suggestion,\n        edit: true,\n      }, function(err, domain, isDefault){\n        if (domain === undefined) return abort()\n        if (err || domain.length < 1 || domain.split(\".\").length < 2) return getDomain(domain)\n        return stats(domain)\n      })\n    }\n\n    var domain = req.argv.domain || req.argv[\"_\"][1]\n\n    if (domain) {\n      if (domain.split(\".\").length === 1) {\n        return getDomain()\n      } else {\n        helpers.log(label, domain)\n        return stats(domain)\n      }\n    } else {\n      try {\n        domain = fs.readFileSync(path.join(process.cwd(), \"CNAME\")).toString()\n        domain = domain.split(os.EOL)[0].trim()\n        getDomain()\n      } catch(e) {\n        getDomain()\n      }\n    }\n\n  }\n\n}"}